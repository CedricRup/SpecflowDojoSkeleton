// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Développer une story")]
    public partial class DevelopperUneStoryFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Action.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "Développer une story", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Quand un villageois travaille sur une action, la charge de travail restante sur l" +
            "\'action diminue")]
        [NUnit.Framework.CategoryAttribute("US001")]
        public virtual void QuandUnVillageoisTravailleSurUneActionLaChargeDeTravailRestanteSurLActionDiminue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Quand un villageois travaille sur une action, la charge de travail restante sur l" +
                    "\'action diminue", new string[] {
                        "US001"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Intitule",
                        "Charge"});
            table1.AddRow(new string[] {
                        "Chasser un éléphant",
                        "2"});
#line 6
 testRunner.Given("le rituel \'Crocto\' avec les actions suivantes", ((string)(null)), table1, "Etant donné ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nom"});
            table2.AddRow(new string[] {
                        "Alice"});
#line 10
 testRunner.And("le village \'Petibonum\' habité par", ((string)(null)), table2, "Et ");
#line 14
 testRunner.And("le village \'Petibonum\' effectue le rituel \'Crocto\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Villageois",
                        "Action"});
            table3.AddRow(new string[] {
                        "Alice",
                        "Chasser un éléphant"});
#line 16
 testRunner.Given("le plan d\'action pour le rituel \'Crocto\'", ((string)(null)), table3, "Etant donné ");
#line 20
 testRunner.When("la journée se termine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Intitule",
                        "Charge"});
            table4.AddRow(new string[] {
                        "Chasser un éléphant",
                        "1"});
#line 21
 testRunner.Then("les actions pour le rituel \'Crocto\' sont dans l\'état suivant", ((string)(null)), table4, "Alors ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Quand personne ne travaille sur une action, la charge de travail restante sur l\'a" +
            "ction ne diminue pas")]
        [NUnit.Framework.CategoryAttribute("US001")]
        public virtual void QuandPersonneNeTravailleSurUneActionLaChargeDeTravailRestanteSurLActionNeDiminuePas()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Quand personne ne travaille sur une action, la charge de travail restante sur l\'a" +
                    "ction ne diminue pas", new string[] {
                        "US001"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Intitule",
                        "Charge"});
            table5.AddRow(new string[] {
                        "Chasser un éléphant",
                        "2"});
#line 31
 testRunner.Given("le rituel \'Crocto\' avec les actions suivantes", ((string)(null)), table5, "Etant donné ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nom"});
            table6.AddRow(new string[] {
                        "Alice"});
#line 35
 testRunner.And("le village \'Petibonum\' habité par", ((string)(null)), table6, "Et ");
#line 39
 testRunner.And("le village \'Petibonum\' effectue le rituel \'Crocto\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Villageois",
                        "Action"});
#line 41
 testRunner.Given("le plan d\'action pour le rituel \'Crocto\'", ((string)(null)), table7, "Etant donné ");
#line 44
 testRunner.When("la journée se termine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Intitule",
                        "Charge"});
            table8.AddRow(new string[] {
                        "Chasser un éléphant",
                        "2"});
#line 45
 testRunner.Then("les actions pour le rituel \'Crocto\' sont dans l\'état suivant", ((string)(null)), table8, "Alors ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Une action est terminée lorsque sa charge atteint 0")]
        [NUnit.Framework.CategoryAttribute("US001")]
        public virtual void UneActionEstTermineeLorsqueSaChargeAtteint0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Une action est terminée lorsque sa charge atteint 0", new string[] {
                        "US001"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Intitule",
                        "Charge"});
            table9.AddRow(new string[] {
                        "Chasser un éléphant",
                        "2"});
            table9.AddRow(new string[] {
                        "Invoquer un orage",
                        "1"});
#line 53
 testRunner.Given("le rituel \'Crocto\' avec les actions suivantes", ((string)(null)), table9, "Etant donné ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nom"});
            table10.AddRow(new string[] {
                        "Alice"});
#line 58
 testRunner.And("le village \'Petibonum\' habité par", ((string)(null)), table10, "Et ");
#line 62
 testRunner.And("le village \'Petibonum\' effectue le rituel \'Crocto\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Villageois",
                        "Action"});
            table11.AddRow(new string[] {
                        "Alice",
                        "Invoquer un orage"});
#line 64
 testRunner.Given("le plan d\'action pour le rituel \'Crocto\'", ((string)(null)), table11, "Etant donné ");
#line 68
 testRunner.When("la journée se termine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Intitule",
                        "Charge"});
            table12.AddRow(new string[] {
                        "Chasser un éléphant",
                        "2"});
#line 69
 testRunner.Then("les actions pour le rituel \'Crocto\' sont dans l\'état suivant", ((string)(null)), table12, "Alors ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
